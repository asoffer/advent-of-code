--     ::= import "core.ic"
cstdio ::= import "cstdio.ic"
io     ::= import "io.ic"
file   ::= import "file.ic"

width  ::= 31
height ::= 323

map: [height, width + 1; char]
file.File ("input.txt") open [f: *cstdio.File] {
  load_map(f, map) 
}

counts := [
  count_trees(map, right = 1, down = 1),
  count_trees(map, right = 3, down = 1),
  count_trees(map, right = 5, down = 1),
  count_trees(map, right = 7, down = 1),
  count_trees(map, right = 1, down = 2)]
io.Print(counts[0] * counts[1] * counts[2] * counts[3] * counts[4])

load_map ::= (f: *cstdio.File, m: *[height, width + 1; char]) -> () {
  for (0, height) do [i: i64] {
    cstdio.fgets((@m)[i][0], (width + 1) as i32, f)
    f'fgetc // Ignore remaining newline.
  }
}

count_trees ::= (m: *[height, width + 1; char], right: i64, down: i64) -> i64 {
  i := 0
  j := 0
  tree_count := 0
  while (i < height) do {
    if ((@m)[i][j % width] == "#"[0]) then {
      tree_count += 1
    }
    i += down
    j += right
  }
  return tree_count
}
