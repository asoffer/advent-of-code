--      ::= import "core.ic"
c       ::= import "c/types.ic"
cstdlib ::= import "c/stdlib.ic"
cstdio  ::= import "c/stdio.ic"
errno   ::= import "errno.ic"
file    ::= import "file.ic"
io      ::= import "io.ic"

parse_command ::= scope {
  enter ::= jump(line: []char) {
    char_to_integer ::= (ch: char) => ((ch as u8) - (!0 as u8)) as i64

    if (line[0] == !f) then {
      goto forward(char_to_integer(line[8]))
    } else if (line[0] == !d) then {
      goto down(char_to_integer(line[5]))
    } else {
      goto up(char_to_integer(line[3]))
    }
  }

  forward ::= block {
    before ::= (n: i64) => n
    after ::= jump() { goto done() }
  }
  up ::= block {
    before ::= (n: i64) => n
    after ::= jump() { goto done() }
  }
  down ::= block {
    before ::= (n: i64) => n
    after ::= jump() { goto done() }
  }

  exit ::= () -> () {}
}

file.With ("input.txt") open [f: file.File] {
  horizontal: i64
  vertical: i64

  file.Lines (f) each [line: []char] {
    parse_command (line) forward [n: i64] {
        horizontal += n
      } down [n: i64] {
        vertical += n
      } up [n: i64] {
        vertical -= n
      }
  }

  io.Print(horizontal * vertical)
} error [e: errno.error] {
  cstdio.perror("Error opening file".data)
}

